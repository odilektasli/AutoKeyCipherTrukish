{"version":3,"sources":["App.module.css","global/modules/TypeWritter.module.css","components/Encryption.jsx","components/Decryption.jsx","components/AlphabetSelection.jsx","logo.svg","background.jpg","global/TypeWritter.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Encryption","props","state","text","undefined","key","loading","encrypted","alphabet","letters","table","enError","trError","encryption","event","preventDefault","includes","alert","some","el","window","location","reload","console","log","dummyText","dummyKey","addedLength","length","concat","slice","setState","dummyEncrypt","i","keyChar","textChar","keyIndex","indexOf","textIndex","oldProps","this","Form","id","onSubmit","className","style","color","Label","fontSize","Input","onChange","target","value","toLocaleUpperCase","toUpperCase","deneme","placeholder","type","Row","Col","xs","Button","borderRadius","form","disabled","React","Component","Decryption","keyInput","cipherText","plainText","decryption","charAt","currentPlace","plainTextLetter","onClick","AlphabetSelection","setAlphabet","countryCode","svg","width","height","cursor","title","fontStyle","TypeWritter","reveal","loop","index","setTimeout","flashingCursor","styles","App","dict","A","B","C","Ã‡","D","E","trLetters","enLetters","rotate","array","dumArr","push","shift","createTable","dummyTable","times","Banner","Container","fontWeight","fontFamily","Background","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.603adb17.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"VerticalLine\":\"App_VerticalLine__1Wpbw\",\"Background\":\"App_Background__2laUW\",\"Banner\":\"App_Banner__2bCt4\",\"Input\":\"App_Input__3mR1h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TypeWritter\":\"TypeWritter_TypeWritter__tMlXP\"};","import React from 'react'\r\nimport {\r\n    Input,\r\n    Button,\r\n    Row,\r\n    Col,\r\n    Form,\r\n    Label\r\n} from 'reactstrap'\r\nclass Encryption extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            text: undefined,\r\n            key: undefined,\r\n            loading: false,\r\n            encrypted: \"\",\r\n            alphabet: this.props.alphabet,\r\n            letters: this.props.letters,\r\n            table: this.props.table,\r\n            enError: ['Q', 'W', 'X'],\r\n            trError: ['Äž', 'Ãœ', 'Åž', 'Ã–', 'Ã‡']\r\n        }\r\n\r\n        this.encryption = (event) => {\r\n            event.preventDefault()\r\n            if (!this.state.key || !this.state.text) {\r\n                alert(\"Text or key could not be empty!\")\r\n            } else if (this.state.key.includes(\" \") || this.state.text.includes(\" \")) {\r\n                alert(\"Please be sure that there is no blank space in key or text\")\r\n            } else if (this.state.alphabet == \"TR\" && (this.state.enError.some(el => this.state.key.includes(el)) || this.state.enError.some(el => this.state.text.includes(el)))) {\r\n                alert(\"Please switch alphabet to English to make this encryption\")\r\n                window.location.reload()\r\n            } else if (this.state.alphabet == \"EN\" && (this.state.trError.some(el => this.state.key.includes(el)) || this.state.trError.some(el => this.state.text.includes(el)))) {\r\n                alert(\"Please switch alphabet to Turkish to make this encryption\")\r\n                window.location.reload()\r\n            } else {\r\n                console.log(this.state.table)\r\n                let dummyText = this.state.text\r\n                let dummyKey = this.state.key\r\n                let addedLength = this.state.text.length - this.state.key.length\r\n                if (this.state.text.length > this.state.key.length) {\r\n                    dummyKey = dummyKey.concat(dummyText.slice(0, addedLength))\r\n                    console.log(\"ifDummyKey\", dummyKey)\r\n                }\r\n                this.setState({ loading: true }, () => {\r\n                    let dummyEncrypt = \"\"\r\n                    for (let i = 0; i < dummyText.length; i++) {\r\n                        let keyChar = dummyKey.slice(i, i + 1)\r\n                        let textChar = this.state.text.slice(i, i + 1)\r\n                        let keyIndex = this.state.letters.indexOf(keyChar)\r\n                        let textIndex = this.state.letters.indexOf(textChar)\r\n                        console.log(dummyEncrypt)\r\n                        dummyEncrypt = dummyEncrypt.concat(this.state.table[keyIndex][textIndex])\r\n                    }\r\n                    console.log(\"dummyText\", dummyText, \"dummyKey\", dummyKey, \"dummyEncrypt\", dummyEncrypt)\r\n                    this.setState({ encrypted: dummyEncrypt })\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    componentDidUpdate(oldProps) {\r\n        if (oldProps.alphabet !== this.props.alphabet) {\r\n            this.setState({ letters: this.props.letters, table: this.props.table, alphabet: this.props.alphabet })\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Form id=\"submit-form\" onSubmit={this.encryption}>\r\n                <h1 className=\"text-center\" style={{ color: \"white\" }}>Encryption</h1>\r\n                <Label className=\"text-white\" style={{ fontSize: \"20px\" }}>Enter key:</Label>\r\n                <Input className=\"my-3\" style={{ fontSize: \"25px\" }} onChange={(event) => this.setState({ key: this.state.alphabet == \"TR\" ? event.target.value.toLocaleUpperCase('tr-TR') : event.target.value.toUpperCase(), deneme: this.state.alphabet == \"TR\" ? event.target.value.toLocaleUpperCase('tr-TR') : event.target.value.toUpperCase() })} placeholder=\"Enter key here...\"></Input>\r\n                <Label className=\"text-white\" style={{ fontSize: \"20px\" }}>Enter plaintext:</Label>\r\n                <Input className=\"my-3\" type=\"textarea\" style={{ fontSize: \"25px\" }} onChange={(event) => this.setState({ text: this.state.alphabet == \"TR\" ? event.target.value.toLocaleUpperCase('tr-TR') : event.target.value.toUpperCase() })} placeholder=\"Enter plaintext here...\"></Input>\r\n                <Row className=\"d-flex justify-content-center\">\r\n                    <Col xs=\"auto my-1\">\r\n                        <Button color=\"success\" className=\"text-white\" style={{ fontSize: \"25px\", borderRadius: \"10%\" }} form=\"submit-form\">Encrypt</Button>\r\n                    </Col>\r\n                </Row>\r\n                {\r\n                    this.state.encrypted ? (\r\n                        <div>\r\n                            <Label className=\"text-white mb-2\" style={{ fontSize: \"20px\" }}>Encrypted text:</Label>\r\n                            <Input disabled type=\"textarea\" style={{ fontSize: \"25px\" }} value={this.state.encrypted} />\r\n                        </div>\r\n                    ) : null\r\n                }\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Encryption","import React from 'react'\r\nimport {\r\n    Input,\r\n    Button,\r\n    Row,\r\n    Col,\r\n    Form,\r\n    Label,\r\n} from 'reactstrap'\r\n\r\nclass Decryption extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            keyInput: undefined,\r\n            cipherText: undefined,\r\n            plainText: undefined,\r\n            letters: this.props.letters,\r\n            table: this.props.table,\r\n            alphabet: this.props.alphabet,\r\n            enError: ['Q', 'W', 'X'],\r\n            trError: ['Äž', 'Ãœ', 'Åž', 'Ä°', 'Ã–', 'Ã‡']\r\n        }\r\n\r\n        this.decryption = () => {\r\n            if (!this.state.keyInput || !this.state.cipherText) {\r\n                alert(\"Text or key could not be empty!\")\r\n            } else if (this.state.keyInput.includes(\" \") || this.state.cipherText.includes(\" \")) {\r\n                alert(\"Please be sure that there is no blank space in key or text\")\r\n            } else if (this.state.alphabet == \"TR\" && (this.state.enError.some(el => this.state.keyInput.includes(el)) || this.state.enError.some(el => this.state.cipherText.includes(el)))) {\r\n                alert(\"Please switch alphabet to English to make this decryption\")\r\n                window.location.reload()\r\n            } else if (this.state.alphabet == \"EN\" && (this.state.trError.some(el => this.state.keyInput.includes(el)) || this.state.trError.some(el => this.state.cipherText.includes(el)))) {\r\n                alert(\"Please switch alphabet to Turkish to make this decryption\")\r\n                window.location.reload()\r\n            } else {\r\n                let keyInput = this.state.keyInput\r\n                let text = \" \"\r\n                console.log(this.state.letters)\r\n                for (let i = 0; i < this.state.cipherText.length; i++) {\r\n                    let keyIndex = this.state.letters.indexOf(keyInput.charAt(i))\r\n                    let currentPlace = this.state.table[keyIndex].indexOf(this.state.cipherText.slice(i, i + 1))\r\n                    let plainTextLetter = this.state.letters[currentPlace]\r\n                    console.log(plainTextLetter)\r\n                    text = text.concat(plainTextLetter)\r\n                    keyInput = keyInput.concat(plainTextLetter)\r\n                }\r\n\r\n                this.setState({ plainText: text })\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    componentDidUpdate(oldProps) {\r\n        if (oldProps.alphabet !== this.props.alphabet) {\r\n            this.setState({ letters: this.props.letters, table: this.props.table, alphabet: this.props.alphabet })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form>\r\n                <h1 className=\"text-center\" style={{ color: \"white\" }}>Decryption</h1>\r\n                <Label className=\"text-white\" style={{ fontSize: \"20px\" }}>Enter key:</Label>\r\n                <Input className=\"my-3\" id=\"key\" style={{ fontSize: \"25px\" }} onChange={(event) => this.setState({ keyInput: this.state.alphabet == \"TR\" ? event.target.value.toLocaleUpperCase('tr-TR') : event.target.value.toUpperCase() })} placeholder=\"Key giriniz...\"></Input>\r\n                <Label className=\"text-white\" style={{ fontSize: \"20px\" }}>Enter cipher text:</Label>\r\n                <Input className=\"my-3\" style={{ fontSize: \"25px\" }} type=\"textarea\" onChange={(event) => this.setState({ cipherText: this.state.alphabet == \"TR\" ? event.target.value.toLocaleUpperCase('tr-TR') : event.target.value.toUpperCase() })} placeholder=\"Text giriniz...\"></Input>\r\n                <Row className=\"d-flex justify-content-center\">\r\n                    <Col xs=\"auto my-1\">\r\n                        <Button color=\"success\" className=\"text-white\" style={{ fontSize: \"25px\", borderRadius: \"10%\" }} onClick={() => { this.decryption() }}>Decrypt</Button>\r\n                    </Col>\r\n                </Row>\r\n                {\r\n                    this.state.plainText ? (\r\n                        <div>\r\n                            <Label className=\"text-white mb-2\" style={{ fontSize: \"20px\" }}>Decrypted text:</Label>\r\n                            <Input type=\"textarea\" style={{ fontSize: \"25px\" }} disabled value={this.state.plainText} />\r\n                        </div>\r\n                    ) : null\r\n                }\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Decryption","import React from 'react'\r\n\r\nimport ReactCountryFlag from 'react-country-flag'\r\nimport {\r\n    Input,\r\n    Button,\r\n    Row,\r\n    Col,\r\n    Container,\r\n    Form,\r\n    Label\r\n} from 'reactstrap'\r\n\r\nclass AlphabetSelection extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            alphabet: \"Turkish\"\r\n        }\r\n\r\n        this.setAlphabet = (alphabet) => {\r\n            this.props.setAlphabet(alphabet)\r\n            this.setState({ alphabet: alphabet === \"TR\" ? \"Turkish\" : \"English\" })\r\n        }\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <Row className=\"d-flex justify-content-center\">\r\n                <p className=\"text-white text-center p-0\" style={{ fontSize: \"35px\" }}>Select the alphabet</p>\r\n                <Col xs=\"auto\">\r\n                    <ReactCountryFlag onClick={() => this.setAlphabet(\"TR\")}\r\n                        countryCode=\"TR\"\r\n                        svg\r\n                        style={{\r\n                            width: '7em',\r\n                            height: 'em',\r\n                            borderRadius: '20%',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                        title=\"TR\"\r\n                    />\r\n                </Col>\r\n                <Col xs=\"auto\">\r\n                    <ReactCountryFlag onClick={() => this.setAlphabet(\"EN\")}\r\n                        countryCode=\"US\"\r\n                        svg\r\n                        style={{\r\n                            width: '7em',\r\n                            height: 'em',\r\n                            borderRadius: '20%',\r\n                            cursor: 'pointer'\r\n                        }}\r\n                        title=\"US\"\r\n                    />\r\n                </Col>\r\n                <p className=\"text-white text-center mt-3\" style={{ fontStyle: \"italic\", fontSize: \"25px\" }}>Selected alphabet is {this.state.alphabet}</p>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AlphabetSelection","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/background.da75529b.jpg\";","// React Base Component\r\nimport React from 'react'\r\n\r\n// CSS Module\r\nimport styles from './modules/TypeWritter.module.css'\r\n\r\nclass TypeWritter extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            value: \"\",\r\n            cursor: true\r\n        }\r\n\r\n        this.reveal = (loop) => {\r\n            if (0 < loop) {\r\n                this.setState({\r\n                    value: this.state.value + this.props.value.charAt(this.state.index),\r\n                    index: this.state.index + 1\r\n                }, () => {\r\n                    setTimeout(() => {\r\n                        this.reveal(loop - 1)\r\n                    }, 50)\r\n                })\r\n            } else {\r\n                this.flashingCursor()\r\n            }\r\n        }\r\n\r\n        this.flashingCursor = () => {\r\n            this.setState({ cursor: !this.state.cursor }, () => {\r\n                setTimeout(() => {\r\n                    this.flashingCursor()\r\n                }, 500)\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            index: 0,\r\n            width: typeof this.props.value === 'string' ? this.props.value.length : 0\r\n        }, () => {\r\n            setTimeout(() => {\r\n                this.reveal(this.state.width)\r\n            }, 500);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <p className={styles.TypeWritter + \" px-2 pt-2 mx-auto text-center text-sm-left\"} style={{ width: (this.state.width + 3) + \"ch\", fontSize: \"25pt\" }}>\r\n                {[this.state.value, (this.state.cursor ? '|' : <span>&nbsp;</span>)]}\r\n            </p>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TypeWritter\r\n","import React from 'react'\r\nimport Encryption from './components/Encryption'\r\nimport Decryption from './components/Decryption'\r\nimport AlphabetSelection from './components/AlphabetSelection'\r\nimport {\r\n    Input,\r\n    Button,\r\n    Row,\r\n    Col,\r\n    Container,\r\n    Form,\r\n    Label\r\n} from 'reactstrap'\r\nimport logo from './logo.svg';\r\nimport styles from './App.module.css';\r\nimport Background from './background.jpg'\r\nimport TypeWritter from './global/TypeWritter'\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            text: undefined,\r\n            key: undefined,\r\n            keyInput: undefined,\r\n            cipherText: undefined,\r\n            plainText: undefined,\r\n            encrypted: \"\",\r\n            alphabet: \"\",\r\n            deneme: undefined,\r\n            dict: [{ A: 1, B: 2, C: 3, Ã‡: 4, D: 5, E: 6 }],\r\n            trLetters: [\"A\", \"B\", \"C\", \"Ã‡\", \"D\", \"E\", \"F\", \"G\", \"Äž\", \"H\", \"I\", \"Ä°\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"Ã–\", \"P\", \"R\", \"S\", \"Åž\", \"T\", \"U\", \"Ãœ\", \"V\", \"Y\", \"Z\"],\r\n            enLetters: [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"],\r\n            letters: undefined,\r\n            table: []\r\n        }\r\n\r\n        this.rotate = (array) => {\r\n            let dumArr = [...array]\r\n            dumArr.push(dumArr.shift())\r\n            return dumArr\r\n        }\r\n\r\n        this.createTable = () => {\r\n            let letters = this.state.letters\r\n            let dummyTable = this.state.table\r\n            let times = letters.length\r\n            for (let i = 0; i < times; i++) {\r\n                dummyTable.push(letters)\r\n                letters = this.rotate(letters)\r\n\r\n            }\r\n            this.setState({ table: dummyTable }, () => console.log(this.state.letters, this.state.table))\r\n        }\r\n\r\n        this.setAlphabet = (alphabet) => {\r\n            this.setState({ alphabet: alphabet, table: [], letters: alphabet == \"TR\" ? this.state.trLetters : this.state.enLetters }, () => this.createTable())\r\n            console.log(alphabet)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ alphabet: \"TR\", letters: this.state.trLetters }, () => { this.createTable() })\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.Banner}>\r\n                <Container className=\"align-items-center\">\r\n                    <Row>\r\n                        <Col className={styles.Input}>\r\n                            <TypeWritter value=\"ISE-426 Computer Security / VigenÃ¨re Autokey System \" />\r\n                            <p className=\"text-white  p-0 m-0\" style={{ fontStyle: \"italic\", fontWeight: \"lighter\", fontFamily: \"italic\" }}>Written by;</p>\r\n                            <p className=\"text-white  p-0 m-0\" style={{ fontWeight: \"lighter\", fontFamily: \"italic\" }}>Ã–zer DÄ°LEKTAÅžLI - 17243510048</p>\r\n                            <p className=\"text-white  p-0 m-0\" style={{ fontWeight: \"lighter\", fontFamily: \"italic\" }}>Onuralp Enes Ã–Z - 17243510014</p>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"d-flex justify-content-center\">\r\n                        <Col className={styles.Input} xs=\"auto\">\r\n                            <AlphabetSelection setAlphabet={this.setAlphabet} />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row >\r\n                        <Col className={styles.Input}>\r\n                            <Encryption alphabet={this.state.alphabet} table={this.state.table} letters={this.state.letters} />\r\n                        </Col>\r\n                        <Col className={styles.Input}>\r\n                            <Decryption alphabet={this.state.alphabet} table={this.state.table} letters={this.state.letters} />\r\n                        </Col>\r\n\r\n                    </Row>\r\n                </Container>\r\n                <div className={styles.Background} />\r\n            </div >\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}